{"version":3,"sources":["components/Pixels.js","App.js","reportWebVitals.js","index.js"],"names":["Pixels","red","green","blue","style","backgroundColor","width","height","App","useState","arr","setArr","random_num","Math","floor","random","useEffect","colors","Set","size","rgb_random","add","random_rgb","Array","from","sort","textAlign","maxWidth","display","flexWrap","padding","transform","length","map","val","i","split","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAceA,EAZA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAC5B,OACE,wBACEC,MAAO,CACLC,gBAAgB,OAAD,OAASJ,EAAT,aAAiBC,EAAjB,aAA2BC,EAA3B,KACfG,MAAO,EACPC,OAAQ,MC4DDC,EAjEH,WACV,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACMC,EAAa,WAEjB,OAAOC,KAAKC,MAAuC,GAAhC,GAAAD,KAAKE,SAAsB,KA8BhD,OAvBAC,qBAAU,WACR,IAAMC,EAAS,IAAIC,KAMA,WACjB,KAAOD,EAAOE,KAAO,OAAO,CAC1B,IAAIC,EALA,GAAN,OAAUR,IAAV,YAA0BA,IAA1B,YAA0CA,KAMxCK,EAAOI,IAAID,IAIfE,GAEAX,EAAOY,MAAMC,KAAKP,MACjB,IAIHP,EAAIe,OAGF,gCACE,mBACErB,MAAO,CACLsB,UAAW,UAFf,0BAOA,qBACEtB,MAAO,CACLuB,SAAU,IACVC,QAAS,OACTC,SAAU,OACVC,QAAS,GACTC,UAAW,iBANf,SASGrB,EAAIsB,OAAS,GAEZtB,EAAIuB,KAAI,SAACC,EAAKC,GACZ,IAAMlC,EAAMiC,EAAIE,MAAM,KAAK,GACrBlC,EAAQgC,EAAIE,MAAM,KAAK,GACvBjC,EAAO+B,EAAIE,MAAM,KAAK,GAC5B,OAAO,cAAC,EAAD,CAAgBnC,IAAKA,EAAKC,MAAOA,EAAOC,KAAMA,GAAjCgC,YCjDjBE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.02d0d0d7.chunk.js","sourcesContent":["// Takes in the red, green and blue colours as props and set as\n\nconst Pixels = ({ red, green, blue }) => {\n  return (\n    <canvas\n      style={{\n        backgroundColor: `rgb(${red}, ${green}, ${blue})`,\n        width: 1,\n        height: 1,\n      }}\n    ></canvas>\n  );\n};\n\nexport default Pixels;\n","import { useEffect, useState } from \"react\";\nimport Pixels from \"./components/Pixels\";\n\nconst App = () => {\n  const [arr, setArr] = useState([]);\n  const random_num = () => {\n    // maximum is 32 and minimum is 1\n    return Math.floor((Math.random() * (33 - 1) + 1) * 8);\n  };\n\n  // generate colors at the start\n  // taking a set to save distinct values\n  // running the loop till the size of the set is 32768\n  // to get all the distinct pixel colors\n  useEffect(() => {\n    const colors = new Set();\n\n    const random_rgb_gen = () => {\n      return `${random_num()},${random_num()},${random_num()}`;\n    };\n\n    const random_rgb = () => {\n      while (colors.size < 32768) {\n        var rgb_random = random_rgb_gen();\n        colors.add(rgb_random);\n      }\n    };\n\n    random_rgb();\n\n    setArr(Array.from(colors));\n  }, []);\n\n  // after all the colours are generated, here sorting the colors\n  // to give something visual good.\n  arr.sort();\n\n  return (\n    <div>\n      <p\n        style={{\n          textAlign: \"center\",\n        }}\n      >\n        Canvas Image\n      </p>\n      <div\n        style={{\n          maxWidth: 256,\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          padding: 20,\n          transform: \"rotate(90deg)\",\n        }}\n      >\n        {arr.length > 0 &&\n          // splitting the red, green and blue colors and passing as props to Pixels component.\n          arr.map((val, i) => {\n            const red = val.split(\",\")[0];\n            const green = val.split(\",\")[1];\n            const blue = val.split(\",\")[2];\n            return <Pixels key={i} red={red} green={green} blue={blue} />;\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}